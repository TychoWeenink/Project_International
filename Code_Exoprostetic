#define LED_SUPPORT      2    // Indicator LED Support ON (D2)
#define LED_EMERGENCY    3    // Indicator LED Emergency Stop (D3)
#define LED_ON           4    // Indicator LED ON (D4)
#define BUTTON_START     5    // Button Start (D5)
#define BUTTON_SIT       6    // Button Sit (D6)
#define BUTTON_EMERGENCY 7    // Button Emergency Stop (D7)
#define END_SWITCH_1     8    // End switch 1 (volledig gestrekt) (D8)
#define END_SWITCH_2     9    // End switch 2 (beginstand) (D9)
#define RPWM             10   // R_PWM (IBT-2) (D10)
#define LPWM             16   // L_PWM (IBT-2) (D16)
#define POT_RANGE        A0   // Potentiometer voor stretchtijd (A0)
#define POT_SPEED        A1   // Potentiometer voor motorsnelheid (A1)

const int MIN_RUNTIME = 9000;
const int MAX_RUNTIME = 13000;

enum State {
  STATE_IDLE = 0,
  STATE_EXTEND,
  STATE_REVERSE_SHORT,
  STATE_WAIT_SIT,
  STATE_EMERGENCY
};

State currentState = STATE_IDLE;
unsigned long stretchStartTime = 0;
unsigned long emergencyRecoveryStart = 0;
int chosenRunTime = 0;
int chosenSpeed = 0;

void setup() {
  Serial.begin(9600);

  pinMode(LED_SUPPORT, OUTPUT);
  pinMode(LED_EMERGENCY, OUTPUT);
  pinMode(LED_ON, OUTPUT);
  pinMode(BUTTON_START, INPUT_PULLUP);
  pinMode(BUTTON_SIT, INPUT_PULLUP);
  pinMode(BUTTON_EMERGENCY, INPUT_PULLUP);
  pinMode(END_SWITCH_1, INPUT_PULLUP);
  pinMode(END_SWITCH_2, INPUT_PULLUP);
  pinMode(RPWM, OUTPUT);
  pinMode(LPWM, OUTPUT);

  digitalWrite(LED_ON, HIGH);
}

void loop() {
  bool startPressed      = !digitalRead(BUTTON_START);
  bool sitPressed        = !digitalRead(BUTTON_SIT);
  bool emergencyPressed  = !digitalRead(BUTTON_EMERGENCY);
  bool endSwitch1Pressed = !digitalRead(END_SWITCH_1);
  bool endSwitch2Pressed = !digitalRead(END_SWITCH_2);

  if (emergencyPressed) {
    currentState = STATE_EMERGENCY;
    emergencyRecoveryStart = millis();
    Serial.println("STATE_EMERGENCY: Noodstop geactiveerd");
  }

  switch (currentState) {
    case STATE_IDLE:
      digitalWrite(LED_EMERGENCY, LOW);
      if (startPressed && endSwitch2Pressed) {
        chosenRunTime = map(analogRead(POT_RANGE), 0, 1023, MIN_RUNTIME, MAX_RUNTIME);
        chosenSpeed = map(analogRead(POT_SPEED), 0, 1023, 0, 255);
        Serial.print("Gekozen stretchtijd: "); Serial.println(chosenRunTime);
        Serial.print("Gekozen snelheid: "); Serial.println(chosenSpeed);
        stretchStartTime = millis();
        currentState = STATE_EXTEND;
      }
      break;

    case STATE_EXTEND:
      runMotor(chosenSpeed);
      if (millis() - stretchStartTime >= chosenRunTime || endSwitch1Pressed) {
        stopMotor();
        currentState = endSwitch1Pressed ? STATE_EMERGENCY : STATE_REVERSE_SHORT;
      }
      break;

    case STATE_REVERSE_SHORT:
      runMotorReverse(chosenSpeed);
      delay(1000);
      stopMotor();
      currentState = STATE_WAIT_SIT;
      break;

    case STATE_WAIT_SIT:
    Serial.print("STATE_WAIT_SIT");
      if (sitPressed) {
        Serial.print("SIT_pressed");
        runMotorReverse(chosenSpeed);       // geen terug
        Serial.print("reverse");

        if(!END_SWITCH_2){
          Serial.println("END_2");
          stopMotor();
        }
        //while (!digitalRead(END_SWITCH_2)) {
          //delay(50);
         // Serial.print(".");
        //}
        //Serial.print("while_done");
        //stopMotor();


        currentState = STATE_IDLE;
      }
      break;

    case STATE_EMERGENCY:
      stopMotor();
      digitalWrite(LED_EMERGENCY, HIGH);
      if (startPressed && sitPressed && millis() - emergencyRecoveryStart >= 2000) {
        runMotorReverse(chosenSpeed);
        while (!digitalRead(END_SWITCH_2)) {
          delay(50);
        }
        stopMotor();
        digitalWrite(LED_EMERGENCY, LOW);
        currentState = STATE_IDLE;
      }
      break;
  }
  delay(100);
}

void runMotor(int speed) {
  analogWrite(RPWM, speed);
  analogWrite(LPWM, 0);
}

void runMotorReverse(int speed) {
  analogWrite(RPWM, 0);
  analogWrite(LPWM, speed);
}

void stopMotor() {
  analogWrite(RPWM, 0);
  analogWrite(LPWM, 0);
}
